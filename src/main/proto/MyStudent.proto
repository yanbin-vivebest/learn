syntax = "proto3";

package com.learn.demo.proto;

option java_package = "com.learn.demo.proto";
option java_outer_classname = "MyStudentProto";
option java_multiple_files = true;

//------------ 不能直接使用protoc来编译，因为protoc会仅仅只编译message，需要使用 plugin->protobuf->complile 以及 plugin->protobuf->complile-custom 分别进行编译，分别双击即可
//该文件必须放置在src/main/proto里面，默认去这个目录寻找
//编译好的文件存储在 E:\wrok\workspace\learn\target\generated-sources\protobuf\java  控制台有输出


//服务(接口)
service MyStudentService{
    //0-0
    rpc GetRealNameByUsername(MyRequest) returns (MyResponse){}

    //下面的方式是错误的，GRPC要求请求和响应是要求定义的Message类型。int32并不是一个定义的Message类型
    //和Thrift有明显的不同，Thrift是可以直接使用字符串类型或者int等等其他类型
    //rpc GetStudentsByAge(int32) returns (stream StudentResponse){}

    //需要改成下面的方式   一次发送，一次接受，然后多次返回，一次接收。 0-1
    rpc GetStudentsByAge(StudentRequest) returns (stream StudentResponse){}

    //1-0
    rpc GetStudentWrapperByAges(stream StudentRequest) returns (StudentResponseList){}

    //0-0  双向流式数据传递
    rpc BiTalk(stream StreamRequest) returns (stream StreamResponse){}
}

//消息
message MyRequest{
    string username = 1;
}
//消息
message MyResponse{
    string realName = 1;
}

message StudentRequest{
    int32 age = 1;
}
message StudentResponse{
    string name = 1;
    int32 age = 2;
    string city = 3;
}

message StudentResponseList{
    repeated StudentResponse studentResponse = 1;
}

message StreamRequest{
    string request_info = 1;
}
message StreamResponse{
    string response_info = 1;
}
